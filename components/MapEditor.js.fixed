import React, { useState, useCallback } from 'react'
import {
  ReactFlow,
  Controls,
  Background,
  useNodesState,
  useEdgesState,
  useReactFlow,
  ReactFlowProvider,
  MiniMap,
  Panel
} from 'reactflow'
import 'reactflow/dist/style.css'

// Import extracted components
import { nodeTypes } from './nodes'
import { edgeTypes } from './edges'
import MapControls from './mapEditor/MapControls'
import MapHeader from './mapEditor/MapHeader'
import ThemeControls from './mapEditor/ThemeControls'

// Import operation hooks
import useNodeOperations from './mapEditor/nodeOperations'
import useEdgeOperations from './mapEditor/edgeOperations'
import useMapOperations from './mapEditor/mapOperations'
import useGraphUtils from './mapEditor/graphUtils'

/**
 * Main MapEditor component
 * Central component that coordinates all graph editing functionality
 */
const MapEditor = () => {
  // ========================================
  // STATE MANAGEMENT
  // ========================================

  // Primary state: nodes and edges arrays (React Flow format)
  const [nodes, setNodes, onNodesChange] = useNodesState([])
  const [edges, setEdges, onEdgesChange] = useEdgesState([])

  // Selection state for UI interactions
  const [selectedNodes, setSelectedNodes] = useState([])
  const [selectedEdges, setSelectedEdges] = useState([])

  // Counter for unique node IDs
  const [nodeCounter, setNodeCounter] = useState(1)

  // Editor options
  const [autoConnectEnabled, setAutoConnectEnabled] = useState(false)
  const [selectedEdgeType, setSelectedEdgeType] = useState('default')
  const [darkMode, setDarkMode] = useState(false)

  // Access React Flow instance
  const { fitView, getViewport } = useReactFlow()

  // ========================================
  // CUSTOM HOOKS FOR OPERATIONS
  // ========================================

  // Node operations
  const nodeOperations = useNodeOperations({
    nodes,
    setNodes,
    edges,
    setEdges,
    nodeCounter,
    setNodeCounter,
    selectedNodes,
    setSelectedNodes,
    getViewport,
    markMapAsModified: (value) => setMapModifiedAfterLoad(value),
  })

  // Extract the calculateNextNodeCounter function for mapOperations hook
  const { calculateNextNodeCounter, addNode, deleteSelectedNodes, updateNodeLabel } = nodeOperations

  // Map operations (save, load, export, import)
  const mapOperations = useMapOperations({
    nodes,
    edges,
    setNodes,
    setEdges,
    fitView,
    calculateNextNodeCounter,
    setNodeCounter,
    setSelectedNodes,
    setSelectedEdges,
  })

  // Extract map operations
  const { 
    currentMapId,
    setCurrentMapId,
    currentMapName, 
    setCurrentMapName,
    mapModifiedAfterLoad,
    setMapModifiedAfterLoad,
    isLoading,
    loadMapId,
    setLoadMapId,
    availableMaps,
    fetchAvailableMaps,
    saveMap,
    loadMapById,
    exportAsPng,
    exportAsJson,
    importFromJson,
    createNewMap
  } = mapOperations

  // Edge operations
  const edgeOperations = useEdgeOperations({
    nodes,
    edges, 
    setEdges,
    selectedEdges,
    setSelectedEdges,
    selectedEdgeType,
    markMapAsModified: (value) => setMapModifiedAfterLoad(value),
  })

  // Extract edge operations
  const { addEdge, onConnect, deleteSelectedEdges, linkSelectedNodes } = edgeOperations

  // Graph utilities
  const graphUtils = useGraphUtils({
    nodes,
    setNodes,
    setEdges,
    setNodeCounter,
    setSelectedNodes,
    setSelectedEdges,
    markMapAsModified: (value) => setMapModifiedAfterLoad(value),
  })

  // Extract graph utilities
  const { alignNodes, distributeNodes, autoLayout } = graphUtils

  // ========================================
  // EVENT HANDLERS
  // ========================================

  // Handle node changes and track modifications
  const handleNodesChange = useCallback(
    (changes) => {
      onNodesChange(changes)
      // Mark as modified if there are actual changes (not just selection)
      if (changes.some((change) => change.type !== 'select')) {
        setMapModifiedAfterLoad(true)
      }
    },
    [onNodesChange, setMapModifiedAfterLoad]
  )

  // Handle edge changes and track modifications
  const handleEdgesChange = useCallback(
    (changes) => {
      onEdgesChange(changes)
      // Mark as modified if there are actual changes (not just selection)
      if (changes.some((change) => change.type !== 'select')) {
        setMapModifiedAfterLoad(true)
      }
    },
    [onEdgesChange, setMapModifiedAfterLoad]
  )

  // Update selection state for UI
  const onSelectionChange = useCallback(
    ({ nodes: selectedNodes = [], edges: selectedEdges = [] }) => {
      setSelectedNodes(selectedNodes)
      setSelectedEdges(selectedEdges)
    },
    [setSelectedNodes, setSelectedEdges]
  )

  // Handle key commands (delete, etc.)
  const onKeyDown = useCallback(
    (event) => {
      if (event.key === 'Delete' || event.key === 'Backspace') {
        deleteSelectedNodes()
        deleteSelectedEdges()
      }
    },
    [deleteSelectedNodes, deleteSelectedEdges]
  )

  // Toggle dark mode
  const toggleDarkMode = useCallback(() => {
    setDarkMode((prevDarkMode) => !prevDarkMode)
  }, [])

  // ========================================
  // RENDER COMPONENT
  // ========================================

  return (
    <div 
      style={{ 
        width: '100%', 
        height: '100vh', 
        backgroundColor: darkMode ? '#1a1a1a' : '#f5f5f5',
        color: darkMode ? '#e0e0e0' : '#333'
      }}
      onKeyDown={onKeyDown}
      tabIndex={0}
    >
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={handleNodesChange}
        onEdgesChange={handleEdgesChange}
        onConnect={onConnect}
        onSelectionChange={onSelectionChange}
        nodeTypes={nodeTypes}
        edgeTypes={edgeTypes}
        proOptions={{ hideAttribution: true }}
        deleteKeyCode={[]} // Disable default deletion to use our custom handler
        fitView
      >
        {/* Map Header with title and save/load controls */}
        <MapHeader
          currentMapName={currentMapName}
          setCurrentMapName={setCurrentMapName}
          mapModifiedAfterLoad={mapModifiedAfterLoad}
          saveMap={saveMap}
          loadMapId={loadMapId}
          setLoadMapId={setLoadMapId}
          availableMaps={availableMaps}
          fetchAvailableMaps={fetchAvailableMaps}
          isLoading={isLoading}
          loadMapById={loadMapById}
          exportToPNG={exportAsPng}
          exportToJSON={exportAsJson}
          importFromJSON={importFromJson}
          createSampleMap={createNewMap}
        />
        
        {/* Theme Controls */}
        <ThemeControls 
          darkMode={darkMode} 
          toggleDarkMode={toggleDarkMode}
          selectedEdgeType={selectedEdgeType}
          setSelectedEdgeType={setSelectedEdgeType}
        />

        {/* Background and controls */}
        <Background color={darkMode ? '#444444' : '#aaaaaa'} gap={16} />
        <Controls />
        <MiniMap 
          nodeColor={darkMode ? '#555555' : '#d3d3d3'}
          maskColor={darkMode ? 'rgba(20,20,20,0.5)' : 'rgba(240,240,240,0.5)'} 
        />
        
        {/* Node and Edge Operation Controls */}
        <MapControls 
          addNode={addNode}
          linkSelectedNodes={linkSelectedNodes}
          autoConnectEnabled={autoConnectEnabled}
          setAutoConnectEnabled={setAutoConnectEnabled}
          selectedEdgeType={selectedEdgeType}
          setSelectedEdgeType={setSelectedEdgeType}
          alignNodes={alignNodes}
          distributeNodes={distributeNodes}
          autoLayout={autoLayout}
          darkMode={darkMode}
          selectedNodes={selectedNodes}
          selectedEdges={selectedEdges}
          deleteSelectedNodes={deleteSelectedNodes}
          deleteSelectedEdges={deleteSelectedEdges}
        />
      </ReactFlow>
    </div>
  )
}

// Wrap the component with ReactFlowProvider
const MapEditorWithProvider = () => {
  return (
    <ReactFlowProvider>
      <MapEditor />
    </ReactFlowProvider>
  )
}

export default MapEditorWithProvider
